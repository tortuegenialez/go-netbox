// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netbox-community/go-netbox/netbox/models"
)

// DcimPowerPortTemplatesReadReader is a Reader for the DcimPowerPortTemplatesRead structure.
type DcimPowerPortTemplatesReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DcimPowerPortTemplatesReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDcimPowerPortTemplatesReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDcimPowerPortTemplatesReadDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDcimPowerPortTemplatesReadOK creates a DcimPowerPortTemplatesReadOK with default headers values
func NewDcimPowerPortTemplatesReadOK() *DcimPowerPortTemplatesReadOK {
	return &DcimPowerPortTemplatesReadOK{}
}

/* DcimPowerPortTemplatesReadOK describes a response with status code 200, with default header values.

DcimPowerPortTemplatesReadOK dcim power port templates read o k
*/
type DcimPowerPortTemplatesReadOK struct {
	Payload *models.PowerPortTemplate
}

func (o *DcimPowerPortTemplatesReadOK) Error() string {
	return fmt.Sprintf("[GET /dcim/power-port-templates/{id}/][%d] dcimPowerPortTemplatesReadOK  %+v", 200, o.Payload)
}
func (o *DcimPowerPortTemplatesReadOK) GetPayload() *models.PowerPortTemplate {
	return o.Payload
}

func (o *DcimPowerPortTemplatesReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PowerPortTemplate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDcimPowerPortTemplatesReadDefault creates a DcimPowerPortTemplatesReadDefault with default headers values
func NewDcimPowerPortTemplatesReadDefault(code int) *DcimPowerPortTemplatesReadDefault {
	return &DcimPowerPortTemplatesReadDefault{
		_statusCode: code,
	}
}

/* DcimPowerPortTemplatesReadDefault describes a response with status code -1, with default header values.

DcimPowerPortTemplatesReadDefault dcim power port templates read default
*/
type DcimPowerPortTemplatesReadDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the dcim power port templates read default response
func (o *DcimPowerPortTemplatesReadDefault) Code() int {
	return o._statusCode
}

func (o *DcimPowerPortTemplatesReadDefault) Error() string {
	return fmt.Sprintf("[GET /dcim/power-port-templates/{id}/][%d] dcim_power-port-templates_read default  %+v", o._statusCode, o.Payload)
}
func (o *DcimPowerPortTemplatesReadDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *DcimPowerPortTemplatesReadDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
